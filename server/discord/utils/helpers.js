const { MessageEmbed } = require('discord.js');

// Function to calculate press conference result
function calculatePressResult(questions, answers) {
  let totalScore = 0;
  const maxScorePerQuestion = 10;
  
  // Evaluate each answer against its question
  for (let i = 0; i < questions.length; i++) {
    const question = questions[i];
    const answer = answers[i] || '';
    const score = evaluateAnswer(question, answer);
    totalScore += score;
  }
  
  // Calculate average score
  const averageScore = totalScore / questions.length;
  
  // Generate result based on score
  return generatePressResult(averageScore, maxScorePerQuestion);
}

// Function to evaluate a single answer
function evaluateAnswer(question, answer) {
  let score = 5; // Start with neutral score
  const answerLower = answer.toLowerCase();
  
  // Check for positive keywords
  for (const keyword of question.positiveKeywords) {
    if (answerLower.includes(keyword.toLowerCase())) {
      score += 1;
    }
  }
  
  // Check for negative keywords
  for (const keyword of question.negativeKeywords) {
    if (answerLower.includes(keyword.toLowerCase())) {
      score -= 1;
    }
  }
  
  // Adjust score based on answer length (penalize too short answers)
  if (answer.length < 20) {
    score -= 2;
  } else if (answer.length > 100) {
    score += 2;
  }
  
  // Clamp score between 0 and 10
  return Math.max(0, Math.min(10, score));
}

// Function to generate press conference result
function generatePressResult(score, maxScore) {
  // Map score to fan support change
  const fanSupportChange = Math.floor((score / maxScore) * 20) - 10;
  
  // Map score to management trust change
  const managementTrustChange = Math.floor((score / maxScore) * 16) - 8;
  
  // Generate media comment
  let mediaComment = '';
  if (score >= 8) {
    mediaComment = 'BasÄ±n aÃ§Ä±klamanÄ±z bÃ¼yÃ¼k beÄŸeni topladÄ±. Medya size Ã¶vgÃ¼ler yaÄŸdÄ±rÄ±yor.';
  } else if (score >= 6) {
    mediaComment = 'AÃ§Ä±klamanÄ±z genel olarak olumlu karÅŸÄ±landÄ±.';
  } else if (score >= 4) {
    mediaComment = 'AÃ§Ä±klamanÄ±z nÃ¶tr tepkiler aldÄ±.';
  } else if (score >= 2) {
    mediaComment = 'BasÄ±n mensuplarÄ± aÃ§Ä±klamanÄ±zÄ± tatmin edici bulmadÄ±.';
  } else {
    mediaComment = 'AÃ§Ä±klamanÄ±z tamamen olumsuz karÅŸÄ±landÄ±. Medya sizi sert bir ÅŸekilde eleÅŸtiriyor.';
  }
  
  // Generate management reaction
  let managementReaction = '';
  if (score >= 7) {
    managementReaction = 'YÃ¶netim kurulu bu basÄ±n toplantÄ±sÄ±ndan memnun kaldÄ±.';
  } else if (score >= 4) {
    managementReaction = 'YÃ¶netim henÃ¼z bir tepki vermedi.';
  } else {
    managementReaction = 'YÃ¶netim kurulu baÅŸkanÄ±, bu tÃ¼r aÃ§Ä±klamalara dikkat edilmesi gerektiÄŸini belirtti.';
  }
  
  // Randomly decide if there's gossip (30% chance)
  const hasGossip = Math.random() < 0.3;
  let gossip = undefined;
  
  if (hasGossip) {
    const gossipOptions = [
      'KulÃ¼p iÃ§inden bir kaynak, aÃ§Ä±klamanÄ±zÄ±n stratejik olarak planlandÄ±ÄŸÄ±nÄ± iddia ediyor.',
      'BazÄ± oyuncular aÃ§Ä±klamanÄ±zÄ± Ã¶zel olarak desteklediklerini belirtti.',
      'Ä°ddiaya gÃ¶re, bazÄ± taraftarlar aÃ§Ä±klamanÄ±zdan sonra sosyal medyada kampanya baÅŸlattÄ±.',
      'KulÃ¼p yÃ¶netiminde, basÄ±n stratejisi konusunda gÃ¶rÃ¼ÅŸ ayrÄ±lÄ±ÄŸÄ± olduÄŸu sÃ¶yleniyor.'
    ];
    gossip = gossipOptions[Math.floor(Math.random() * gossipOptions.length)];
  }
  
  return {
    fanSupportChange,
    managementTrustChange,
    mediaComment,
    managementReaction,
    gossip
  };
}

// Function to format timestamp
function formatTimestamp(date, type = 'full') {
  try {
    const options = { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    
    if (type === 'date') {
      delete options.hour;
      delete options.minute;
    } else if (type === 'time') {
      delete options.weekday;
      delete options.year;
      delete options.month;
      delete options.day;
    }
    
    return new Date(date).toLocaleDateString('tr-TR', options);
  } catch (error) {
    console.error('formatTimestamp error:', error);
    return date.toString();
  }
}

// Function to check if user has team
async function checkUserTeam(user, message) {
  if (!user.currentTeam) {
    await message.reply('HenÃ¼z bir takÄ±m seÃ§memiÅŸsiniz! LÃ¼tfen `.takim [takÄ±m adÄ±]` komutu ile bir takÄ±m seÃ§in.');
    return false;
  }
  return true;
}

// Function to create tutorial embed
function createTutorialEmbed(title, description) {
  return new MessageEmbed()
    .setColor('#5865F2')
    .setTitle(`ğŸ“š ${title}`)
    .setDescription(description)
    .setFooter({ text: 'Futbol RP Bot - YardÄ±m' });
}

module.exports = {
  calculatePressResult,
  formatTimestamp,
  checkUserTeam,
  createTutorialEmbed
};